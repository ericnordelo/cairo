//! > Basic borrow checking valid.

//! > test_function_name
test_function_lowering

//! > function
fn foo(x: ACopy, y: ADrop) {
  if true {
    use_a_copy(x);
    use_a_drop(y);
  } else {
    use_a_drop(y);
  }
  use_a_copy(x);
}

//! > function_name
foo

//! > module_code
extern type ACopy;
impl ACopyCopy of Copy::<ACopy>;
extern type ADrop;
impl ADropDrop of Drop::<ADrop>;

extern fn use_a_copy(x: ACopy) nopanic;
extern fn use_a_drop(x: ADrop) nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_structured
blk0 (root):
Inputs: v0: test::ACopy, v1: test::ADrop
Initial refs:
Statements:
  (v2: ()) <- struct_construct()
  (v3: core::bool) <- bool::True(v2)
  () <- match_enum(v3) {
    bool::False => blk2,
    bool::True => blk1,
  }
End:
  Goto(3, {})

blk1:
Inputs: v4: ()
Initial refs:
Statements:
  () <- test::use_a_copy(v0)
  () <- test::use_a_drop(v1)
End:
  Callsite({})

blk2:
Inputs: v5: ()
Initial refs:
Statements:
  () <- test::use_a_drop(v1)
End:
  Callsite({})

blk3:
Inputs: v0: test::ACopy, v1: test::ADrop
Initial refs:
Statements:
  () <- test::use_a_copy(v0)
  (v6: ()) <- struct_construct()
End:
  Return(v6)

//! > lowering_flat
blk0 (root):
Inputs: v0: test::ACopy, v1: test::ADrop
Statements:
  (v2: ()) <- struct_construct()
  (v3: core::bool) <- bool::True(v2)
  () <- match_enum(v3) {
    bool::False => blk2,
    bool::True => blk1,
  }
End:
  Goto(3, {})

blk1:
Inputs: v4: ()
Statements:
  () <- test::use_a_copy(v0)
  () <- test::use_a_drop(v1)
End:
  Callsite({})

blk2:
Inputs: v5: ()
Statements:
  () <- test::use_a_drop(v1)
End:
  Callsite({})

blk3:
Inputs: v0: test::ACopy, v1: test::ADrop
Statements:
  () <- test::use_a_copy(v0)
  (v6: ()) <- struct_construct()
End:
  Return(v6)
