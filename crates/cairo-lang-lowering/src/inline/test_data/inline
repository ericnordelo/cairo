//! > Test simple inlining.

//! > test_function_name
test_function_inlining

//! > function
fn foo(n: felt) -> felt {
  -n
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > before
blk0 (root):
Inputs:
Statements:
End:
  Unreachable

//! > after
blk0 (root):
Inputs:
Statements:
End:
  Unreachable

//! > lowering_diagnostics

//! > ==========================================================================

//! > Test generic function inlining.

//! > test_function_name
test_function_inlining

//! > function
fn foo(val: Option::<felt>) -> felt {
  bar(val, 2)
}

//! > function_name
foo

//! > module_code
/// If `val` is `Option::Some(x)`, returns `x`. Otherwise, panics.
#[inline(always)]
fn bar<T>(val: Option::<T>, val2: T) -> T {
    match val {
        Option::Some(x) => x,
        Option::None(()) => val2,
    }
}

//! > semantic_diagnostics

//! > before
blk0 (root):
Inputs:
Statements:
End:
  Unreachable

//! > after
blk0 (root):
Inputs:
Statements:
End:
  Unreachable

//! > lowering_diagnostics
error: Inlining of functions where the end of the root block is unreachable is not supported.
 --> lib.cairo:2:1
#[inline(always)]
^***************^

//! > ==========================================================================

//! > Test inlining same arg twice.

//! > test_function_name
test_function_inlining

//! > function
fn foo(n: felt) -> felt {
  bar(n, n)
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn bar(a: felt, b: felt) -> felt  {
  a + b
}

//! > semantic_diagnostics

//! > before
blk0 (root):
Inputs:
Statements:
End:
  Unreachable

//! > after
blk0 (root):
Inputs:
Statements:
End:
  Unreachable

//! > lowering_diagnostics
error: Inlining of functions where the end of the root block is unreachable is not supported.
 --> lib.cairo:1:1
#[inline(always)]
^***************^

//! > ==========================================================================

//! > Test inlining.

//! > test_function_name
test_function_inlining

//! > function
fn foo(a: felt, b: felt) -> felt {
  bar(a + b, b)
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn bar(a: felt, b: felt) -> felt implicits()  {
  bar2(a, b) + bar2(b, a)
}

#[inline(always)]
fn bar2(a: felt, b: felt) -> felt implicits()  {
   a * b
}

//! > semantic_diagnostics

//! > before
blk0 (root):
Inputs:
Statements:
End:
  Unreachable

//! > after
blk0 (root):
Inputs:
Statements:
End:
  Unreachable

//! > lowering_diagnostics
error: Inlining of functions where the end of the root block is unreachable is not supported.
 --> lib.cairo:1:1
#[inline(always)]
^***************^

error: Inlining of functions where the end of the root block is unreachable is not supported.
 --> lib.cairo:6:1
#[inline(always)]
^***************^

//! > ==========================================================================

//! > Test recursive inlining.

//! > test_function_name
test_function_inlining

//! > function
fn foo(a: felt) -> felt {
  first(a)
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn first(a: felt) -> felt {
  second(a)
}

#[inline(always)]
fn second(a: felt) -> felt {
  third(a)
}

#[inline(always)]
fn third(a: felt) -> felt {
   a * a
}

//! > semantic_diagnostics

//! > before
blk0 (root):
Inputs:
Statements:
End:
  Unreachable

//! > after
blk0 (root):
Inputs:
Statements:
End:
  Unreachable

//! > lowering_diagnostics
error: Inlining of functions where the end of the root block is unreachable is not supported.
 --> lib.cairo:1:1
#[inline(always)]
^***************^

error: Inlining of functions where the end of the root block is unreachable is not supported.
 --> lib.cairo:6:1
#[inline(always)]
^***************^

error: Inlining of functions where the end of the root block is unreachable is not supported.
 --> lib.cairo:11:1
#[inline(always)]
^***************^

//! > ==========================================================================

//! > Test impl inlining.

//! > test_function_name
test_function_inlining

//! > function
fn foo() {
  let mut arr = ArrayTrait::new();
  arr.append(5)
}

//! > function_name
foo

//! > module_code
use array::ArrayTrait;

//! > semantic_diagnostics

//! > before
blk0 (root):
Inputs:
Statements:
End:
  Unreachable

//! > after
blk0 (root):
Inputs:
Statements:
End:
  Unreachable

//! > lowering_diagnostics

//! > ==========================================================================

//! > Test inlining of a function with an early return.

//! > test_function_name
test_function_inlining

//! > function
fn foo(a: felt) -> felt {
  if a == 2 {
    bar(a)
  } else {
    a
  }
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn bar(a: felt) -> felt {
  if a == 0 {
    return 1;
  }
  0
}

//! > before
blk0 (root):
Inputs:
Statements:
End:
  Unreachable

blk1:
Inputs:
Statements:
  (v3: core::felt) <- test::bar(v0)
End:
  Callsite({v3 -> v5})

blk2:
Inputs: v4: core::NonZero::<core::felt>
Statements:
End:
  Callsite({v0 -> v5})

blk3:
Inputs:
Statements:
End:
  Unreachable

//! > after
blk0:
Inputs:
Statements:
End:
  Unreachable

blk1:
Inputs:
Statements:
  (v3: core::felt) <- test::bar(v0)
End:
  Callsite({v3 -> v5})

blk2:
Inputs: v4: core::NonZero::<core::felt>
Statements:
End:
  Callsite({v0 -> v5})

blk3:
Inputs:
Statements:
End:
  Unreachable

//! > lowering_diagnostics
error: Inlining of functions where the end of the root block is unreachable is not supported.
 --> lib.cairo:1:1
#[inline(always)]
^***************^

//! > semantic_diagnostics

//! > ==========================================================================

//! > Test inlining heuristic

//! > test_function_name
test_function_inlining

//! > function
fn foo(a: felt) -> felt {
  bar(a) + bar2(a)
}

//! > function_name
foo

//! > module_code
fn bar(a: felt) -> felt {
  bar2(a)
}

fn bar2(a: felt) -> felt {
  1
}

//! > before
blk0 (root):
Inputs:
Statements:
End:
  Unreachable

//! > after
blk0 (root):
Inputs:
Statements:
End:
  Unreachable

//! > lowering_diagnostics

//! > semantic_diagnostics

//! > ==========================================================================

//! > Test preventing inlining heuristic

//! > test_function_name
test_function_inlining

//! > function
fn foo(a: felt) -> felt {
  bar(a) + bar2(a)
}

//! > function_name
foo

//! > module_code
#[inline(never)]
fn bar(a: felt) -> felt {
  bar2(a)
}

#[inline(never)]
fn bar2(a: felt) -> felt {
  1
}

//! > before
blk0 (root):
Inputs:
Statements:
End:
  Unreachable

//! > after
blk0 (root):
Inputs:
Statements:
End:
  Unreachable

//! > lowering_diagnostics

//! > semantic_diagnostics

//! > ==========================================================================

//! > Test returning an input variable as is (not in root block).

//! > test_function_name
test_function_inlining

//! > function
fn foo() -> felt {
  bar(0)
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn bar(a: felt) -> felt {
  if a == 0 {
    return a;
  }
  1
}

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Inlining of functions where the end of the root block is unreachable is not supported.
 --> lib.cairo:1:1
#[inline(always)]
^***************^

//! > before
blk0 (root):
Inputs:
Statements:
End:
  Unreachable

//! > after
blk0 (root):
Inputs:
Statements:
End:
  Unreachable

//! > ==========================================================================

//! > Test inlining of identity function.

//! > test_function_name
test_function_inlining

//! > function
fn foo(n: felt) -> felt {
  identity(n)
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn identity(n: felt) -> felt {
  n
}

//! > semantic_diagnostics

//! > before
blk0 (root):
Inputs:
Statements:
End:
  Unreachable

//! > after
blk0 (root):
Inputs:
Statements:
End:
  Unreachable

//! > lowering_diagnostics
error: Inlining of functions where the end of the root block is unreachable is not supported.
 --> lib.cairo:1:1
#[inline(always)]
^***************^
